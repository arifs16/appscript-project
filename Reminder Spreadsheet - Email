/******** KONFIGURASI ********/
const DEFAULT_REMINDER_HOURS = 24; // default H (jam) jika kolom E kosong

// Indeks kolom (1-based)
const COL_TANGGAL = 1;   // A
const COL_JAM = 2;       // B
const COL_ACARA = 3;     // C
const COL_EMAIL = 4;     // D
const COL_REMINDER = 5;  // E
const COL_TERAKHIR = 6;  // F
const COL_STATUS = 7;    // G

function kirimReminderEmailFromSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Jadwal");
  if (!sheet) {
    Logger.log('Sheet "Jadwal" tidak ditemukan.');
    return;
  }
  const rows = sheet.getDataRange().getValues();
  const now = new Date();
  const timezone = Session.getScriptTimeZone();

  for (let r = 1; r < rows.length; r++) { // mulai baris ke-2
    try {
      const row = rows[r];
      const tanggalCell = row[COL_TANGGAL - 1];
      const jamCell = row[COL_JAM - 1];
      const acara = String(row[COL_ACARA - 1] || "").trim();
      let emailList = String(row[COL_EMAIL - 1] || "").trim();
      const reminderHours = Number(row[COL_REMINDER - 1]) || DEFAULT_REMINDER_HOURS;
      const terakhirDikirim = row[COL_TERAKHIR - 1];

      if (!tanggalCell || !acara || !emailList) {
        // data tidak lengkap -> skip
        continue;
      }

      // normalize recipients (ganti ; jadi ,)
      emailList = emailList.replace(/;/g, ",").trim();

      // buat Date event (gabungkan tanggal + jam)
      let eventDate = (tanggalCell instanceof Date) ? new Date(tanggalCell) : new Date(String(tanggalCell));
      if (jamCell instanceof Date) {
        eventDate.setHours(jamCell.getHours(), jamCell.getMinutes(), 0, 0);
      } else if (typeof jamCell === 'string' && /^\d{1,2}:\d{2}$/.test(jamCell)) {
        const parts = jamCell.split(":").map(Number);
        eventDate.setHours(parts[0], parts[1], 0, 0);
      }

      const diffHours = (eventDate.getTime() - now.getTime()) / (1000 * 60 * 60);

      // kirim jika event masih di masa depan dan dalam rentang reminderHours
      if (diffHours > 0 && diffHours <= reminderHours) {
        // hindari duplicate: jika TerakhirDikirim sudah >= (eventDate - reminderHours) => skip
        if (terakhirDikirim instanceof Date) {
          const threshold = eventDate.getTime() - reminderHours * 3600000;
          if (terakhirDikirim.getTime() >= threshold) {
            continue;
          }
        }

        // buat body email
        const subject = `Reminder: ${acara}`;
        const htmlBody = `
          <p>Halo,</p>
          <p>Ini pengingat untuk acara berikut:</p>
          <ul>
            <li><b>Acara:</b> ${acara}</li>
            <li><b>Tanggal:</b> ${Utilities.formatDate(eventDate, timezone, "yyyy-MM-dd")}</li>
            <li><b>Jam:</b> ${Utilities.formatDate(eventDate, timezone, "HH:mm")}</li>
          </ul>
          <p>Terima kasih.</p>
        `;

        // kirim email
        MailApp.sendEmail({ to: emailList, subject: subject, htmlBody: htmlBody });

        // catat TerakhirDikirim & Status
        sheet.getRange(r + 1, COL_TERAKHIR).setValue(new Date());
        sheet.getRange(r + 1, COL_STATUS).setValue("Terkirim: " + Utilities.formatDate(new Date(), timezone, "yyyy-MM-dd HH:mm"));
        Utilities.sleep(300); // jeda kecil untuk aman
      }
    } catch (err) {
      sheet.getRange(r + 1, COL_STATUS).setValue("Error: " + err.message);
      Logger.log("Error baris " + (r + 1) + ": " + err);
    }
  }
}
